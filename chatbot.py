# -*- coding: utf-8 -*-
"""chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gonITjLDGLbB8dzOh4QR5c-MT3B5_YOZ
"""

import nltk
nltk.download('punkt')
nltk.download('vader_lexicon')
nltk.download('punkt_tab') 

import pandas as pd
import random
from nltk.sentiment import SentimentIntensityAnalyzer
from nltk.tokenize import word_tokenize
from nltk import NaiveBayesClassifier, classify

# Load dataset
data = pd.read_csv("https://raw.githubusercontent.com/ksaikishore09/modifieddataset/refs/heads/main/enhanced_chatbot_dataset_with_sentiment.csv")  # Make sure you have this CSV

# Preprocess: tokenize and label
def format_sentence(sent):
    return {word: True for word in word_tokenize(sent.lower())}

features = [(format_sentence(row["Message"]), row["Response"]) for _, row in data.iterrows()]
random.shuffle(features)

# Train classifier
train_set = features
classifier = NaiveBayesClassifier.train(train_set)

# Initialize sentiment analyzer
sia = SentimentIntensityAnalyzer()

# Chat loop
print("🤖 Advanced Chatbot (type 'quit' to exit)\n")
while True:
    user_input = input("You: ")
    if user_input.lower() == "quit":
        print("Bot: Goodbye!")
        break

    # Sentiment Analysis
    sentiment = sia.polarity_scores(user_input)
    compound = sentiment['compound']

    if compound >= 0.05:
        sentiment_label = "Positive 😊"
    elif compound <= -0.05:
        sentiment_label = "Negative 😞"
    else:
        sentiment_label = "Neutral 😐"

    # Predict response using classifier
    response = classifier.classify(format_sentence(user_input))

    print("Bot:", response)
    print(f"Sentiment: {sentiment_label} (score = {compound})\n")
